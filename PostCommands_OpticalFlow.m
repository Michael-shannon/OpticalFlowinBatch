%
clear all
close all
clc
%%
    
% Code lines for Optical Flow Post-processing

    load('OpticalFlow.mat')
    load('OriginalImage.mat')
    load('DifferenceImage.mat')
    
    % Add directory master, structure or table
    
%%

    mkdir Plots;
%
    vx = OpticalFlow.vxMat;
    vy = OpticalFlow.vyMat;

    rel = OpticalFlow.relMat;

    figure; histogram(rel(:));
    set(gca, 'YScale', 'log');
    %
    %relVal = 0.05*max(rel(:)); %try 0.018? % Originally Lenny tried 1e-3, but it varies across movies
    relVal = 0.005*max(rel(:));


    % Movie displaying rel values

    figure
    for i = 1:OriginalImage.NumFrames-1 % range of images on movie
        imagesc(rel(:, :, i)); drawnow;
    end

    % Movie displaying values considered after thrsholding for rel
    % vector with rel>1e3 should be chosen 
    figure
    for i = 1:OriginalImage.NumFrames-1 % range of images on movie
        imagesc(rel(:, :, i)>relVal); drawnow;
    end
%
    %
    im = OriginalImage.Image;
    % Display original Image
    for i = 1:OriginalImage.NumFrames-1
        imagesc(im(:, :, i)); drawnow;
    end
    close
%
    %
    % Velocity magnitudes

    mag = sqrt(vx.*vx + vy.*vy);

    % histogram of raw magnitudes
    figure
    histogram(mag)
    set(gca, 'YScale', 'log');
    close

    %
    % Reliability mask is generated
    relMask = rel > relVal;

    figure
    histogram(mag(relMask))
    xlim([0 12])
    close

    %%%
    % Display difference image for mask creation
    diffIm = DifferenceImage.smoothDiffImage;
    % 
    figure
    for i = 1:OriginalImage.NumFrames-1
        imagesc(diffIm(:, :, i)>10); drawnow;
    end


    % Masks are produced
    % V magnitude mask is generated
    magMask = mag > .25;

    % mask based in cell position is generated
    diffImMask = diffIm > 15;

    % total mask is generated by combining different masks
    totalMask = relMask & magMask & diffImMask;

    % Actin speed histogram and file

    vMags = figure(); 
    histogram(mag(relMask))
    magV = mag(relMask);
    magV = reshape(magV,[1, size(magV,1)*size(magV,2)*size(magV,3)]); %transformation into linear array
    xlim([0 12])
    xlabel('Speed (um/min)','fontsize',20);
    set(gca,'fontsize',18,'linewidth',2);
    title('V Magnitude')
    Valnameimg = sprintf('P histogram TotalMask');
    saveas(vMags, ['Plots' '\' ...
                    Valnameimg '_Contour'], 'fig');

    save('SpeedsVector.mat','magV')

    % Angles are obtained from velocity components
%
    ang = atan2(-vy, vx);
%     ang =ang((relMask));

    angVector1 = reshape(ang,[1, size(ang,1)*size(ang,2)*size(ang,3)]); 
%     
% 
    VMfit = figure();
    % von mises fitting
    b2 = FitVMLikelihood(angVector1)
    [mu, kappa, p] = MixedVonMisesFit(angVector1)

% 
%     Valnameimg = sprintf('relMask & magMask');
%     saveas(VMfit, ['Plots' '\' ...
%                     Valnameimg '_VMfit'], 'fig');
% 
%     FlatUM(s).VMfitVals = [mu, kappa, p];          
%     FlatUM(s).b2Vals = b2;
%     save('VonMisesVals.mat','FlatUM')

%
%end
% 
% TotalM = figure(); 
% polarhistogram(ang(totalMask))
% title('Total Mask')
% set(gca,'fontsize',18,'linewidth',2);
% Valnameimg = sprintf('P histogram TotalMask');
% saveas(TotalM, ['Plots' '\' ...
%                 Valnameimg '_Contour'], 'fig');
%%           
RelDifM = figure(); 
polarhistogram(ang(relMask & diffIm),'Normalization','probability') %This is a key value that sets what kind of histo you get. Sum all bins = 1.
set(gca,'fontsize',18,'linewidth',2);
title('RelMask + DiffImage')
Valnameimg = sprintf('P histogram RelMask + DiffImage');
saveas(RelDifM, ['Plots' '\' ...
                Valnameimg '_Contour'], 'fig');

RelMagM = figure(); 
polarhistogram(ang(relMask & magMask))
set(gca,'fontsize',18,'linewidth',2);
title('RelMask + magMask')
Valnameimg = sprintf('RelMask + magMask');
saveas(RelMagM, ['Plots' '\' ...
                Valnameimg '_Contour'], 'fig');
% %%
% figure
% for i = 1:6
%     subplot(1, 6, i); magMask = (mag > (i - 1)*.25) & (mag < i*.23);
%     polarhistogram(ang(relMask & magMask), 'normalization', 'probability'); hold on;
% end

 %
 
ang2 = abs(atan2d(-vy, vx));
ang2 = ang2(relMask & magMask);
angVector = reshape(ang2,[1, size(ang2,1)*size(ang2,2)*size(ang2,3)]); %transformation into linear array

PDFangles = figure(); 
Y = angVector;
[N,edges] = histcounts(Y, 50, 'Normalization', 'pdf'); %Looks up PDF method
plot(edges(1:length(N)),N,'k','LineWidth',1.5)
%xlim([0 180])
xlabel('Angle in degrees (0-180)','fontsize',20);
ylabel('PDF','fontsize',20);
set(gca,'fontsize',18,'linewidth',2);
% 
Valnameimg = sprintf('PDF angles in degrees');
saveas(PDFangles, ['Plots' '\' ...
                Valnameimg '_Contour'], 'fig');
            
            
%s3umAng = [s3umAng angVector];

         


%             
%%


cd 'D:\githubsoftware\LennysOpticalFlow\ExampleNK92data_batch_IVAN_Output\';
mkdir FlowMovieFig_relvalpt005;
cd 'D:\githubsoftware\LennysOpticalFlow\ExampleNK92data_entireOutput2\FlowMovieFig_relvalpt005\';
newMask = relMask & magMask & diffIm;

% 
for i = 1:19 % length of your movie
    
    IndexM = newMask(:,:,i);
    vx = OpticalFlow.vxMat(:,:,i);
    vy = OpticalFlow.vyMat(:,:,i);
   % mag = abs(sind(atan2d(-vy, vx))); %sqrt(vx.*vx + vy.*vy); %
    mag = sqrt(vx.*vx + vy.*vy); 
    figure
    imshow(im(:, :, i),[])                                                                                                                  
    
    rVals = randi([1 size(IndexM,1)*size(IndexM,2)],round(size(IndexM,1)*size(IndexM,2)*0.95),1 ); %previously 0.85
    IndexM(rVals)=0;
    vx(find(IndexM==0))=nan;
    vy(find(IndexM==0))=nan;    
    
    hold on; 
    q = quiver(vx, -vy);
    %colorbar;
    SetQuiverColor(q,parula,'mags',mag,'range',[0 7]); % Used for mag colours
    %SetQuiverColor(q,parula,'mags',mag,'range',[0 1]);%Used for direction colours
    SetQuiverLength(q,mag,'HeadLength',0.5,'HeadAngle',90);
    
     %axis([100 220 150 300]);
%     xlim([50 240])
%     ylim([50 290])
%  
%      Valname = sprintf('OptiFlow%d.png',i);%.fig not good
     
   % saveas(q, Valname); %for fig files
    ax = gca;
%     exportgraphics(ax,Valname,'Resolution',300)%for high quality movies
end
% % 
