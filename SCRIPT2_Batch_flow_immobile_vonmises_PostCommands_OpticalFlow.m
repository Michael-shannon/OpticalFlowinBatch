%
clear all
close all
clc
%%
    
% Code lines for Optical Flow Post-processing
masterImportpost='D:\Michael_Shannon\MartinezMaster\PIV_analysis_CD18only\';
masterPlotspost='D:\Michael_Shannon\MartinezMaster\PIV_analysis_CD18only_OUTPUT_relvalpoint01magval1_9-6-2022\';

% headers=[]; 
SHOWPLOTSANDFIGS=1;
MAKEQUIVERMOVIES = 1;

statstable=table();
D = dir(masterImportpost); % A is a struct ... first elements are '.' and '..' used for navigation.
% k=3;
% j=1;
% masterPlotspost=[masterImportpost, 'masterplots\'];
if ~exist (masterPlotspost)
    mkdir (masterPlotspost);
end
%  k=4;
%  j=1;
for k = 3:length(D) % avoid using the first ones
    condD = D(k).name; % Get the condition subdirectory name
      %condDir=[masterImport,'\',condD]
      condDir=[masterImportpost,condD];
      repD = dir(condDir); % Get the file list in the subdirectory
      
      idx = cellfun(@(repD)contains(repD,'output'),{repD.name}, 'Unif',0);          % True If ‘output’ Present
      repD_edited = repD([idx{:}]);                                          % Files Without ‘output’ In File Names
      repD = repD_edited;
      
      for j=1:length(repD)
          imageD=repD(j).name;
            %Have to define new importFolder, which is this one, each time
            importFolderpost=[condDir, '\', imageD, '\']; %you actually WANT the output, not the others
            disp(['Currently processing ', imageD]); 
%             headers=[headers; string(imageD)];%this is supposed to save the header each time, so it can later be made into a table
            load([importFolderpost,'OpticalFlow.mat'])
            load([importFolderpost,'OriginalImage.mat'])
            load([importFolderpost,'DifferenceImage.mat'])
            
%             f=DifferenceImage.smoothDiffImage(:,:,5);
            
            plotsfolder=[importFolderpost, 'Plots', '\'];
            
            if ~exist (plotsfolder)
                mkdir (plotsfolder);
            end
            
            vx = OpticalFlow.vxMat;
            vy = OpticalFlow.vyMat;
            rel = OpticalFlow.relMat;
            
%% SET THE RELVAL, diffIm, calculated mags: IMPORTANT>>>>>>>>>>           
            
            %relVal = 0.05*max(rel(:)); %try 0.018? % Originally Lenny tried 1e-3, but it varies across movies
            relVal = 0.01*max(rel(:)); %MOST DATA USED 0.003. MJS original was 0.005. 0.018 gives nothing on the low intensity movies.0.001 gives an extreme amount of vectors
            % Reliability mask is generated

            diffIm = DifferenceImage.smoothDiffImage;
            
%             Magnitudes calculated 

            mag = sqrt(vx.*vx + vy.*vy);
            
% Masks are produced using a filter on mag >>>>

            relMask = rel > relVal;

            % V magnitude mask is generated
            magMask = mag > 1.0;

            % mask based in cell position is generated
            diffImMask = diffIm > 10; % was 15, changed to 10
            
            
            % total mask is generated by combining different masks
            totalMask = relMask & magMask & diffImMask;
            
            %% Put this here to test
            vMags = figure(); 
            histogram(mag(relMask))
            magV = mag(relMask);
            magV = reshape(magV,[1, size(magV,1)*size(magV,2)*size(magV,3)]); %transformation into linear array
            xlim([0 12])
            xlabel('Speed (um/min)','fontsize',20);
            set(gca,'fontsize',18,'linewidth',2);
            title('V Magnitude')
            Valnameimg = sprintf('P_histogram_TotalMask');
%             saveas(vMags, ['Plots' '\' ...
%                             Valnameimg '_Contour'], 'fig');
            saveas(vMags, [plotsfolder,Valnameimg, '_Contour'], 'fig');
            im = OriginalImage.Image;
            
            %% Visualizing masks
            
           %FIGURE CREATION

            if SHOWPLOTSANDFIGS==1
                
           % Figure 1: Original image image
            
                im = OriginalImage.Image;
                % Display original Image
                figure
                for i = 1:OriginalImage.NumFrames-1
                    imagesc(im(:, :, i)); drawnow;
                end
                close

                % Figure 2: histogram of rel 

                figure; histogram(rel(:));
                set(gca, 'YScale', 'log');

                % Figure 3/4: Movies before and after filtering by relVal.

                % Movie displaying rel values %% Consider removing in batch
                % mode
                figure
                for i = 1:OriginalImage.NumFrames-1 % range of images on movie
                    imagesc(rel(:, :, i)); drawnow;
                end
                close

                      figure
                for i = 1:OriginalImage.NumFrames-1 % range of images on movie
                    imagesc(rel(:, :, i)>relVal); drawnow;
                end
                close

                  figure
                for i = 1:OriginalImage.NumFrames-1
                    imagesc(diffIm(:, :, i)>10); drawnow;
                end
                close


                % histogram of raw magnitudes prior to filtering with relVal
                figure
                histogram(mag)
                set(gca, 'YScale', 'log');
                close
                % Movie displaying values considered after thrsholding for rel
                % vector with rel>1e3 should be chosen 

                % Histogram of Magnitudes after relMask applied.
                figure
                histogram(mag(relMask))
                xlim([0 12])
                close
            end


            %%%
            % Display difference image for mask creation

          
            
%% Doing some angle calculations
            
            ang = atan2(-vy, vx);% That translates the angles into relating to a sign
            angdegrees= atan2d(-vy, vx);
            angabsolutes=abs(ang);
            angdegreesabsolutes=abs(angdegrees);
        %     ang =ang((relMask));
            ang2 = abs(atan2d(-vy, vx)); %That translates all of the values to absolutes (gets rid of the sign). Also atan2d is like atan but in degrees.

            
%             see1=ang(80,80,26);
%             see2=ang2(80,80,26);
            
            angVector1 = reshape(ang,[1, size(ang,1)*size(ang,2)*size(ang,3)]); %transformation into linear array
            
            % Note that its this that goes into the plot
            angVector = reshape(ang2,[1, size(ang2,1)*size(ang2,2)*size(ang2,3)]); %transformation into linear array
            
%THIS IS VERY IMPORTANT: PUTTING DATA INTO ALLMAGTABLE

            alldatatable=table(); %This wipes previous one each loop
            alldatatable=[alldatatable;table({mag},{ang},{angdegrees},{angabsolutes},{angdegreesabsolutes},{relMask},{magMask},{diffImMask},{totalMask},{imageD}, {condD})]; % Is that the right ang?
            alldatatable.Properties.VariableNames= {'Magnitudes','Angles','AnglesDeg','AnglesAbs','AnglesDegAbs','RelVal','MagVal','DiffVal','TotalVal','Replicatename', 'Conditionname'}; %thismakescolnamesfortable
            
%             see=mag(:,:,26);
            
%             thisrow=alldatatable(1,:); %at the moment, this takes the first row (the first replicate). Actually now there will only ever be one row.


%% This loop will get the immobile fraction per time and the flowing actin percentage per time


            immobilefraction=zeros(1,OriginalImage.NumFrames-1); %preallocate for single scalar per timepoint
            movingactinfraction=zeros(1,OriginalImage.NumFrames-1); 
            
            for p=1:OriginalImage.NumFrames-1 

                movingactin= alldatatable.RelVal{1}(:,:,p).*alldatatable.MagVal{1}(:,:,p);'all';
%                 movingactin= alldatatable.RelVal{1}(:,:,p).*alldatatable.MagVal{1}(:,:,p).*alldatatable.DiffVal{1}(:,:,p);'all';
% Seems like this diff image is way too intense
                movingactintotal=sum(movingactin(:)==1);
                allactin= alldatatable.RelVal{1}(:,:,p);'all';
%                 allactin= alldatatable.RelVal{1}(:,:,p).*alldatatable.DiffVal{1}(:,:,p);'all';
                allactintotal=sum(allactin(:)==1);
                movingactinfractiontotal=movingactintotal/allactintotal;
                immobileactin=allactintotal-movingactintotal;
                immobilefractionoftotal=immobileactin/allactintotal;
                immobilefraction(p)=immobilefractionoftotal;
                movingactinfraction(p)=movingactinfractiontotal;
            end



%% THIS LOOP GETS THE SPEED DATA PER TIME:

            speedmean=zeros(1,OriginalImage.NumFrames-1); %preallocate for speed
            speedCIlower=zeros(1,OriginalImage.NumFrames-1);
            speedCIupper=zeros(1,OriginalImage.NumFrames-1);
            thedata=zeros(1024,1024);
%             p=6;
            for p=1:OriginalImage.NumFrames-1 

%                 thedata= alldatatable.Magnitudes{1}(:,:,p).*alldatatable.RelVal{1}(:,:,p);'all';
                thedata= alldatatable.Magnitudes{1}(:,:,p).*alldatatable.RelVal{1}(:,:,p).*alldatatable.MagVal{1}(:,:,p);'all';
                thedata=thedata(:);
                thedata=nonzeros(thedata);
                meanspeed = mean(thedata);
                SEMspeed = std(thedata)/sqrt(length(thedata));
                tsspeed = tinv([0.025  0.975],length(thedata)-1);
                CIspeed = meanspeed + tsspeed*SEMspeed; 
                speedmean(p)=meanspeed;
                speedCIlower(p)=CIspeed(1,1);
                speedCIupper(p)=CIspeed(1,2);

            end

   %%         
            % THIS LOOP GETS THE ANGLE DATA PER TIME: 

            anglemean=zeros(1,OriginalImage.NumFrames-1); %preallocate for speed
            angleCIlower=zeros(1,OriginalImage.NumFrames-1);
            angleCIupper=zeros(1,OriginalImage.NumFrames-1);
            theangledata=zeros(1024,1024);
            
            %
            
            for p=1:OriginalImage.NumFrames-1 

%                 theangledata= alldatatable.Angles{1}(:,:,p).*alldatatable.RelVal{1}(:,:,p).*alldatatable.MagVal{1}(:,:,p).*alldatatable.DiffVal{1}(:,:,p);'all'; 
                theangledata= alldatatable.Angles{1}(:,:,p).*alldatatable.RelVal{1}(:,:,p).*alldatatable.MagVal{1}(:,:,p);'all'; 

                % 1) Which Angles will you use?
                % 'Angles','AnglesDeg','AnglesAbs','AnglesDegAbs', Angles
                % seems to work best...
                % 2) Which mask combination is better? At the moment, match
                % with the speed and immobile fraction (use the relval and
                % the magval, but not the diffval). Experiment with this
                % after.
                % 3) Only one angles goes into the statstable - how to
                % assess here?
                theangledata=theangledata(:);
                theangledata=nonzeros(theangledata);
                meanangle = mean(theangledata);
                SEMangle = std(theangledata)/sqrt(length(theangledata));
                tsangle = tinv([0.025  0.975],length(theangledata)-1);
                CIangle = meanangle + tsangle*SEMangle; 
                anglemean(p)=meanangle;
                angleCIlower(p)=CIangle(1,1);
                angleCIupper(p)=CIangle(1,2);

            end
         
            %% This does bulk Von Mises. NOTE, IN HERE, AND IN THE BELOW, YOU HAVE REMOVED THE FIRST TWO AND LAST TWO FRAMES
            
            theangledata=alldatatable.Angles{1}(:,:,3:end-2).*alldatatable.RelVal{1}(:,:,3:end-2).*alldatatable.MagVal{1}(:,:,3:end-2);'all'; 
            angdata=theangledata(:);
            angdata=nonzeros(angdata);
            angVector1 = reshape(ang,[1, size(ang,1)*size(ang,2)*size(ang,3)]); 
%             b2 = FitVMLikelihood(angVector1)
            [mu, kappa, p] = MixedVonMisesFit(angVector1);
            VMfitVals = [mu, kappa, p]; % kappa and mu are included in plots d,e figure5 
%             b2Vals = b2;
            
%             VMfit = figure();
            % plot of the fit overlayed on the polar histogram
%             Valnameimg = sprintf('VonMisesfit');
%             saveas(VMfit, [plotsfolder,Valnameimg], 'fig');
           
            
%% This does Von Mises over time windows

            timeofmovie=length(alldatatable.Angles{1}(1,1,:));% Here also you subtract 2 from the end.
            timewindow = 9;
            
%             windowoverlap = 5;% Redundant until you figure out how to do it
%             b2Valstimewindow=[];% Include if necessary, takes time
        
            for tstart=1:(timeofmovie-timewindow)%Here you start from frame 3
                tend=tstart+timewindow;
                thedata = alldatatable.Angles{1}(:,:,tstart:tend).*alldatatable.RelVal{1}(:,:,1:10).*alldatatable.MagVal{1}(:,:,1:10);'all';
                thedata=thedata(:);
                thedata=nonzeros(thedata);
                [mu, kappa, p] = MixedVonMisesFit(thedata);
%                 b2 = FitVMLikelihood(thedata);%can be included
%                 if necessary but takes a long time
                kappaVals(tstart)= kappa;
                muVals(tstart)= mu;
                pVals(tstart)= p;
%                 b2Valstimewindow=[b2Valstimewindow,b2]; %can be included
%                 if necessary but takes a long time

            end
                
               


%In the lines 17,18 of the function FitVMLikelihood, you can modify the way the polar histogram is plotted (counts, probability).
            angVector1 = reshape(ang,[1, size(ang,1)*size(ang,2)*size(ang,3)]);

            
           %%  statstable=[]; %DEBUGGING, DELETE AFTER
%             statstable=[statstable;table({condD},{imageD},{speedmean}, {speedSEM}, {anglemean}, {angleSEM})];
            statstable=[statstable;table({condD},{imageD},{speedmean},{speedCIlower},{speedCIupper}, {anglemean},{angleCIlower},{angleCIupper}, {immobilefraction},{movingactinfraction},{mu},{kappa},{p},{muVals},{kappaVals},{pVals})];
            
            if SHOWPLOTSANDFIGS==1
                
                TotalAngleMeans = figure(); 
                linearthing1=statstable.(6);
                linearthing=cell2mat(linearthing1);
                polarhistogram(linearthing,'Normalization','probability') %This is a key value that sets what kind of histo you get. Sum all bins = 1.
                set(gca,'fontsize',18,'linewidth',2);
                title('AnglesDegAbs')
                Valnameimg = sprintf('P histogram TotalMask of Angle Means');


                % Overall actin speed histogram and file

                vMags = figure(); 
                histogram(mag(relMask))
                magV = mag(relMask);
                magV = reshape(magV,[1, size(magV,1)*size(magV,2)*size(magV,3)]); %transformation into linear array
                xlim([0 12])
                xlabel('Speed (um/min)','fontsize',20);
                set(gca,'fontsize',18,'linewidth',2);
                title('V Magnitude')
                Valnameimg = sprintf('P_histogram_TotalMask');
    %             saveas(vMags, ['Plots' '\' ...
    %                             Valnameimg '_Contour'], 'fig');
                saveas(vMags, [plotsfolder,Valnameimg, '_Contour'], 'fig');
    %             save('SpeedsVector.mat','magV')
                %%%%%

                AngleHisto = figure();
                histogram(ang)
                xlim([0 12])
                xlabel('Angle of Flow','fontsize',20);
                set(gca,'fontsize',18,'linewidth',2);
                title('Angle of Flow')
                Valnameimg = sprintf('Angle Of Flow Histogram');
%  
%                 TotalM = figure(); 
%                 polarhistogram(ang(totalMask))
%                 title('Total Mask what is this scale is totally wrong maybe')
%                 set(gca,'fontsize',18,'linewidth',2);
%                 Valnameimg = sprintf('P histogram TotalMask');
%                 saveas(TotalM, [plotsfolder,Valnameimg, '_Contour'], 'fig');

       

%% POLAR HISTOGRAMS of directionality USING DIFFERENT COMBINATIONS OF MASKS: total, relmask and diffmask, as well as relmask and magmask.

                TotalM = figure(); 
                polarhistogram(ang(totalMask),'Normalization','probability') %This is a key value that sets what kind of histo you get. Sum all bins = 1.
                set(gca,'fontsize',18,'linewidth',2);
                title('TotalMask (relmask+diffmask+magmask)')
                Valnameimg = sprintf('P histogram RelMask + DiffImage');
                saveas(TotalM, [plotsfolder,Valnameimg, '_Contour'], 'fig');         

                RelDifM = figure(); 
                polarhistogram(ang(relMask & diffIm),'Normalization','probability') %This is a key value that sets what kind of histo you get. Sum all bins = 1.
                set(gca,'fontsize',18,'linewidth',2);
                title('RelMask + DiffImage')
                Valnameimg = sprintf('P histogram RelMask + DiffImage');
                saveas(RelDifM, [plotsfolder,Valnameimg, '_Contour'], 'fig');

                RelMagM = figure(); 
                polarhistogram(ang(relMask & magMask),'Normalization','probability')
                set(gca,'fontsize',18,'linewidth',2);
                title('RelMask + magMask')
                Valnameimg = sprintf('RelMask + magMask');
                saveas(RelMagM, [plotsfolder,Valnameimg, '_Contour'], 'fig');
                % %%

    %% Line plot of probability density function


%                 PDFangles = figure(); 
%                 Y = angVector;
%                 [N,edges] = histcounts(Y, 50, 'Normalization', 'pdf'); %Looks up PDF method
%                 plot(edges(1:length(N)),N,'k','LineWidth',1.5)
%                 xlim([0 180])
%                 xlabel('Angle in degrees (0-180)','fontsize',20);
%                 ylabel('PDF','fontsize',20);
%                 set(gca,'fontsize',18,'linewidth',2);
%                 % 
%                 Valnameimg = sprintf('PDF angles in degrees');
%                 saveas(PDFangles, [plotsfolder,Valnameimg, '_Contour'], 'fig');
            end
            
            

            

                
            if MAKEQUIVERMOVIES ==1
                          
                flowfigfolder=[importFolderpost, 'FlowMovieFig', '\'];
                if ~exist (flowfigfolder)
                    mkdir (flowfigfolder);
                end
                highresflowfigfolder=[importFolderpost, 'highresFlowMovieFig', '\'];
                if ~exist (highresflowfigfolder)
                    mkdir (highresflowfigfolder);
                end

                newMask = relMask & magMask & diffIm;
    %             i=1;

                for i = 1:OriginalImage.NumFrames-1 % length of your movie
                    IndexM = newMask(:,:,i);
                    vx = OpticalFlow.vxMat(:,:,i);
                    vy = OpticalFlow.vyMat(:,:,i);
                   % mag = abs(sind(atan2d(-vy, vx))); %sqrt(vx.*vx + vy.*vy); %
                    mag = sqrt(vx.*vx + vy.*vy); 

                    flowfig=figure();
                    imshow(im(:, :, i),[])                                                                                                                 
                    rVals = randi([1 size(IndexM,1)*size(IndexM,2)],round(size(IndexM,1)*size(IndexM,2)*0.95),1 ); %previously 0.85
                    IndexM(rVals)=0;
                    vx(find(IndexM==0))=nan;
                    vy(find(IndexM==0))=nan;   
                    hold on; 
                    q = quiver(vx, -vy);
                    %colorbar;
                    SetQuiverColor(q,parula,'mags',mag,'range',[0 7]); % Used for mag colours
                    %SetQuiverColor(q,parula,'mags',mag,'range',[0 1]);%Used for direction colours
                    SetQuiverLength(q,mag,'HeadLength',0.5,'HeadAngle',90);
                    %axis([100 220 150 300]);
                %     xlim([50 240])
                %     ylim([50 290])
                %  

                    Valname = sprintf('OptiFlow%d.fig',i);% 
%                     saveas(flowfig, [flowfigfolder, Valname]);

                    Valnamehighres = sprintf('OptiFlow%d.tif',i);% can change to png?
                    Valnamehighresdir = [highresflowfigfolder, Valnamehighres];
                    ax = gca;
                    exportgraphics(ax,Valnamehighresdir,'Resolution',300)%for high quality movies
                    close all
                end
            end
      end
end
                
            
                    
                      
                    



% Okay, so this huge table is too massive. So what you want to do, is to
% make instead a summary stats table. Find out the format that you want,
% from recommended to plots of differences.
          

statstable.Properties.VariableNames={'Condition','Replicate','SpeedMean','SpeedCILower','SpeedCIUpper','AngleMean', 'AngleCILower','AngleCIUpper', 'ImmobileFraction' ,'MovingActinFraction','mu','kappa','p','mutimewindow','kappatimewindow','ptimewindow'}; %Importantly, this can only be changed once, after the fact
save([masterPlotspost, 'Alldatastatstable.mat'], 'statstable', '-v7.3'); 



    